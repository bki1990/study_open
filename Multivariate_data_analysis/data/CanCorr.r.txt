get.d <- function(X){
  p <- min(dim(X))
  d <- rep(0,p)
  for(i in 1:p) d[i] <- X[i,i]
  return(d)
}

to.double<- function(x){
  p <- dim(x)[1]
  q <- dim(x)[2]
  y <- matrix(0,p,q)
  colnames(y) <- colnames(x)
  for(i in 1:p) for(j in 1:q) y[i,j] <- as.double(x[i,j])
  return(y)
}

std <- function(X){
  (X - mean(X))/sd(X)
}
standardize <- function(X){
  n <- dim(X)[2]
  return(apply(X,2,std))
}
P <-function(x) {
  y <- x %*% solve(t(x) %*% x) %*% t(x)
  y
}

Q <- function(x) {
  q <- diag(dim(x)[1]) - P(x)
  q
}
UnitVector<-function(n){matrix(rep(1,n),n,1)}
sympower <- function(x,pow) {
  edecomp <- eigen(x)
  roots <- edecomp$val
  v <- edecomp$vec
  d <- roots^pow
  if(length(roots)==1) d <- matrix(d,1,1) else d <- diag(d)
  sympow <- v %*% d %*% t(v)
  sympow
}


canonical.cor <- function(X,Y){
  ## Compute number of Canonical Variates
  if(is.data.frame(X))X <- data.matrix(X)
  if(is.data.frame(Y))Y <- data.matrix(Y)
  k <- min(dim(X)[2],dim(Y)[2])
  ## Get number of observations in X and Y
  N.x <- dim(X)[1]
  N.y <- dim(Y)[1]
  ##
  if(!is.double(X))X <- to.double(X)
  if(!is.double(Y))Y <- to.double(Y)
  S.xy <- cov(X,Y)
  S.xx <- var(X)
  S.yx <- cov(Y,X)
  S.yy <- var(Y)
  A <- eigen(solve(S.xx) %*% S.xy %*% solve(S.yy) %*% S.yx)$vectors[,1:k]
  eigensolution <- eigen(solve(S.yy) %*% S.yx %*% solve(S.xx) %*% S.xy)
  B <- eigensolution$vectors[,1:k]
  if(!is.double(A))A <- to.double(A)
  if(!is.double(B))B <- to.double(B)
  R <- eigensolution$values[1:k]
  R <- sqrt(R)
  ## Correct a possible sign reversal
  RAB <- cor(X%*%A,Y%*%B)
  R.c <- diag(sign(get.d(RAB)))
  A <- A%*%R.c
  ## Singly standardized weights (SAS "raw")
  A.single <- A %*% solve(sqrt(diag(diag(var(X %*% A)))))
  B.single <- B %*% solve(sqrt(diag(diag(var(Y %*% B)))))
  rownames(A.single) <- colnames(X)
  rownames(B.single) <- colnames(Y)
  ## fully standardized weights
  ##Z-score x,y
  Z.x <- standardize(X)
  Z.y <- standardize(Y)
  ##Correlation Matrices
  R.xy <- cor(X,Y)
  R.xx <- cor(X)
  R.yx <- t(R.xy)
  R.yy <- cor(Y)
  A.s <- eigen(solve(R.xx) %*% R.xy %*% solve(R.yy) %*% R.yx)$vectors[,1:k]
  B.s <- eigen(solve(R.yy) %*% R.yx %*% solve(R.xx) %*% R.xy)$vectors[,1:k]
  if(!is.double(A.s))A.s <- to.double(A.s)
  if(!is.double(B.s))B.s <- to.double(B.s)
  A.fully <- A.s %*% solve(sqrt(diag(diag(var(Z.x %*% A.s)))))
  B.fully <- B.s %*% solve(sqrt(diag(diag(var(Z.y %*% B.s)))))
  ## Correct a possible sign reversal
  R.c <- diag(sign(diag(cor(Z.x%*%A.fully,Z.y%*%B.fully))))
  A.fully <- A.fully%*%R.c
  rownames(A.fully) <- colnames(X)
  rownames(B.fully) <- colnames(Y)
  ##Loadings
  A.loadings <- cor(Z.x, Z.x %*% A.fully)
  rownames(A.loadings) <- colnames(X)
  B.loadings <- cor(Z.y, Z.y %*% B.fully)
  rownames(B.loadings) <- colnames(Y)  
  ## Significiance Tests
  ev <- (1 - R^2)
  n <- dim(X)[1]
  p <- dim(X)[2]
  q <- dim(Y)[2]
  k <- min(p, q)
  m <- n - 3/2 - (p + q)/2
  w <- rev(cumprod(rev(ev)))
  # initialize
  d1 <- d2 <- f <- vector("numeric", k)
  for (i in 1:k) {
    s <- sqrt((p^2 * q^2 - 4)/(p^2 + q^2 - 5))
    si <- 1/s
    d1[i] <- p * q
    d2[i] <- m * s - p * q/2 + 1
    r <- (1 - w[i]^si)/w[i]^si
    f[i] <- r * d2[i]/d1[i]
    p <- p - 1
    q <- q - 1
  }
  
  pv <- pf(f, d1, d2, lower.tail = FALSE)
  dmat <- cbind(CanonicalR=R,WilksL = w, F = f, df1 = d1, df2 = d2, p = pv)
  colnames(dmat) <- c("Canonical R", "Wilk's Lambda", "F", "df1","df2", "p value")
  output <- list("Canonical Correlations" = dmat, "X (SAS) Raw Weights" = A.single,"Y (SAS) Raw Weights" = B.single,"X Fully Standardized Weights" = A.fully,"Y Fully Standardized Weights" = B.fully,"X Canonical Loadings" = A.loadings,
                 "Y Canonical Loadings" = B.loadings)
  return(output)
}
